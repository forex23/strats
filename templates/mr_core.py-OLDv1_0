"""
backtest_base.py  –  single-source metrics generator.
Every engine copies this file into its own folder at version-creation time
to remain audit-proof while inheriting the same stat logic.
"""

from __future__ import annotations
import base64
import pandas as pd, numpy as np, os, io, matplotlib.pyplot as plt
from datetime import datetime
from typing import List

# ───────────────────────── helper ─────────────────────────
def _png_from_equity(eq: List[dict]) -> bytes:
    ts  = [p["ts"] for p in eq]
    bal = [p["equity"] for p in eq]
    fig, ax = plt.subplots()
    ax.plot(ts, bal)
    ax.set_title("Equity curve")
    ax.set_xlabel("Time"); ax.set_ylabel("Equity (pips)")
    buf = io.BytesIO()
    fig.savefig(buf, format="png")
    plt.close(fig)
    return buf.getvalue()

# ───────────────────────── public API ─────────────────────
def generate_backtest_output(trade_log: pd.DataFrame,
                             equity_curve: List[dict],
                             params: dict,
                             engine_file: str) -> dict:
    """
    Convert raw trade log & equity points into the canonical JSON bundle.
    trade_log must include columns: pips, entry_time, exit_time, reason
    equity_curve: list of {'ts': iso-string, 'equity': float}
    """
    pnl     = trade_log["pips"]
    wins    = pnl[pnl > 0]
    losses  = pnl[pnl < 0]

    # hit counts
    stop_hits = trade_log.reason.eq("stop").sum()
    time_hits = trade_log.reason.eq("time").sum()
    mean_hits = trade_log.reason.eq("mean").sum()
    tot_hits  = len(trade_log)

    # streaks
    signs = np.sign(pnl)
    win_streak, loss_streak, cur = 0, 0, 0
    for s in signs:
        cur = cur + 1 if s > 0 else (cur - 1 if s < 0 else 0)
        win_streak  = max(win_streak,  cur)
        loss_streak = min(loss_streak, cur)
    loss_streak = abs(loss_streak)

    # simult trade stats
    sim = trade_log["entry_time"].dt.floor("T").value_counts()
    gt1 = (sim > 1).sum()
    max_sim = sim.max() if not sim.empty else 0


    png_b64 = base64.b64encode(_png_from_equity(equity_curve)).decode() \
              if equity_curve else None

    res = {
        "engine": str(engine_file),
        "params": params,
        "trades": int(tot_hits),
        "win_%": round(float((pnl > 0).mean() * 100), 1),
        "expect_pips": round(float(pnl.mean()), 2),
        "total_pips": round(float(pnl.sum()), 2),
        "av_win_pips": round(float(wins.mean()), 2) if not wins.empty else None,
        "av_loss_pips": round(float(losses.mean()), 2) if not losses.empty else None,
        "profit_factor": round(float(wins.sum() / -losses.sum()), 2)
                         if not losses.empty else None,
        "sharpe": round(float(pnl.mean() / pnl.std()), 2)
                  if pnl.std() > 0 else None,
        "max_dd_pips": round(float(
            (pd.Series([e["equity"] for e in equity_curve]).cummax() -
             pd.Series([e["equity"] for e in equity_curve])).max()), 2)
                       if equity_curve else None,
        "#_stop_hits": int(stop_hits),
        "stop_hit_%": round(float(stop_hits) / tot_hits * 100, 1) if tot_hits else None,
        "#_time_hits": int(time_hits),
        "time_hit_%": round(float(time_hits) / tot_hits * 100, 1) if tot_hits else None,
        "#_mean_hits": int(mean_hits),
        "mean_hit_%": round(float(mean_hits) / tot_hits * 100, 1) if tot_hits else None,
        "avg_trade_len_min": round(float(
            (trade_log.exit_time - trade_log.entry_time)
            .dt.total_seconds().mean() / 60), 2) if not trade_log.empty else None,
        "#_sim_trades_gt1": int(gt1),
        "max_sim_trades": int(max_sim),
        "win_streak_max": int(win_streak),
        "loss_streak_max": int(loss_streak),
        "equity_curve_png": png_b64,
        "trade_log": trade_log.to_dict(orient="records"),
    }
    return res
